	/**
	 * @Resource Name: ViewDataScript.js
	 * @Description: This file is used in ViewData.page
	 * ===============================================================================================================================
	 *       Version   | Date        | Author              | Comments
	 *   -----------------------------------------------------------------------------------------------------------------------------
	 *       1.0       | 01/06/2016  | Eternus Solutions   | 1. Created static resource for getHistoryRecordsForObject, 	
	 *                                                          hideDateFormat, typewatch, checkDayValue and other functions.
	 *       1.1       | 09/06/2016  | Eternus Solutions   | 1. Added validateDate() function.
	 *       1.2       | 09/06/2016  | Eternus Solutions   | 1. Code review changes.
	 *  ==============================================================================================================================
	 **/
 
	/**
	 * @Description: It sets value of selected object, start date and end date to fetch the history
	 * @Param: NA
	 * @Return: NA
	 * @Date: 10/06/2016
	 **/
	function getHistoryRecordsForObject() {
		selectedObj = $(".object option:selected").val();
		startDate =  $('.startDate').val();
		endDate = $('.endDate').val();
		selectedObjLabel = $(".object option:selected").text();
		angular.element(document.getElementById('displayHistoryRecord')).scope().getRecords();
	}

	/**
	 * @Description: It hides standard date square bracket format with input date field. 
	 * @Param: NA
	 * @Return: NA
	 * @Date: 12/06/2016
	 **/
	function hideDateFormat() {
		$(".dateFormat").hide();
	}

	/**
	 * @Description: It remove ascending and descending classes to passed DOM of the Table header element
	 * @Param: elementId : Table header sorting Id
	 * @Return: NA
	 * @Date: 13/06/2016
	 **/		
	var checkSort = function(elementId) {
		$(".scrollTable th .sort").each(function() {
			if (!($(this).attr("id") == elementId))
				$(this).removeClass("ascending descending");
		});
	}

	/**
	 * @Description: It watches user key press in input field related to number of days and 
	 *               apply delay (1 sec) till the user adds the input value
	 * @Param: NA
	 * @Return: NA
	 * @Date: 16/06/2016
	 **/
	var typewatch = function(){
		var timer = 0;
		return function(callback, ms){
			clearTimeout (timer);
			timer = setTimeout(callback, ms);
		}  
	}();
		
	/**
	 * @Description: It evaluates valid or invalid value in number of days 
	 * @Param: NA
	 * @Return: NA
	 * @Date: 18/06/2016
	 **/    
	function checkDayValue() {
		if($(".TxtDays").val() == 0){
			$("#DayError").html('Invalid Days');
			$(".FromToDate").hide();
			$(".showMoreButton").hide();
		}
		else{
			 $("#DayError").html('');
			 $(".FromToDate").show();
			 $(".showMoreButton").show();
			DateFileter();
		}
	}
	  
	/**
	 * @Description: It validates the start and end date 
	 * @Param: flag: 
	 * @Return: NA
	 * @Date: 19/06/2016
	 **/  
	function validateDate(flag) {
	 
		var startDate = $('.startDate').val();
		var endDate = $('.endDate').val();
		var msgs1 = [];
		var msgs2 = [];
		var msgElement1 = $("#dateErrorMessageStartDateDiv");
		var msgElement2 = $("#dateErrorMessageEndDateDiv");
		msgElement1.html('');
		msgElement2.html('');
		$("#DayError").html('');
		if (startDate !== null && 
			startDate !== '' &&
			!isValidDate(startDate)) {
			msgs1.push('Invalid Start Date');
		}
		if (endDate !== null && 
			endDate !== '' && 
			!isValidDate(endDate)) {
			msgs2.push('Invalid End Date');
		}
		if (startDate !== null && 
			startDate !== '' && 
			endDate !== null &&
			endDate !== '' && 
			!msgs1.length &&
			!isValidRange(startDate, endDate)) {
			msgs1.push('Invalid Date Range');
		}
		if (msgs1.length) {
			var msgHtml = '';
			for (i = 0; i < msgs1.length; i++) {
				msgHtml += msgs1[i] + '</br>';
			}
			$(".showMoreButton").hide();
			msgElement1.html(msgHtml);
		}
		if (msgs2.length) {
			var msgHtml = '';
			for (i = 0; i < msgs2.length; i++) {
				msgHtml += msgs2[i] + '</br>';
			}
			msgElement2.html(msgHtml);
			$(".showMoreButton").hide();
		} else if (!msgs1.length && !msgs2.length) {
			if (flag === true) {
				
				DateFileter();
				if ($(".dateRange option:selected").val != 'Custom') {
					checkIfSelectedFilterIsCustomOrNot();
				}
			}
			$(".showMoreButton").show();
			$(".FromToDate").show();
		} else {
			checkIfSelectedFilterIsCustomOrNot();
		}
	 	
	}
	   
	/**
	 * @Description: It checks the selected date range option is custom
	 * @Param: NA
	 * @Return: NA
	 * @Date: 20/06/2016
	 **/   
	function checkIfSelectedFilterIsCustomOrNot() {
		
		$(".dateRange option").each(function() {
			 if (this.value == 'Custom') {
				 this.selected = true;
			 }
		});
	}

	/**
	 * @Description: It checks the date range is valid or not
	 * @Param: startDate: Start Date
	 *         endDate: End Date
	 * @Return: NA
	 * @Date: 20/06/2016
	 **/
	function isValidRange(startDate, endDate) {

		var dateFormatArray = new Array();
        dateFormatArray.push(dateFormatVar);
        dateFormatArray.push(dateFormatVar.replace('DD', 'D').replace('MM', 'M'));
        
        if (moment(startDate, dateFormatArray, true).isValid() &&
        moment(endDate, dateFormatArray, true).isValid() && 
        moment(startDate, dateFormatArray) > moment(endDate, dateFormatArray)) {
            return false;
        }
        return true;
	}

	/**
	 * @Description: It checks the date is valid or not
	 * @Param: dateValue: Date Value 
	 * @Return: NA
	 * @Date: 20/06/2016
	 **/
	function isValidDate(dateValue) {
		var dateFormatArray = new Array();
        dateFormatArray.push(dateFormatVar);
        dateFormatArray.push(dateFormatVar.replace('DD', 'D').replace('MM', 'M'));

        
        if(!moment(dateValue, dateFormatArray, true).isValid()) {
            return false;
        }
        return true;
	}

	/**
	 * @Description: It clears the start and end date
	 * @Param: NA
	 * @Return: NA
	 * @Date: 20/06/2016
	 **/
	function clearStartAndEndDate() {
		var startDate = $('.startDate').val();
		var endDate = $('.endDate').val();
		/*if(moment(startDate, dateFormatVar)._d.toString() === 'Invalid Date' ||
		   moment(endDate, dateFormatVar)._d.toString() === 'Invalid Date') {
		   $('.startDate').val("")
		   $('.endDate').val("");
		} */
		var dateFormatArray = new Array();
        dateFormatArray.push(dateFormatVar);
        dateFormatArray.push(dateFormatVar.replace('DD', 'D').replace('MM', 'M'));
		if(!moment(startDate, dateFormatArray, true).isValid() || !moment(endDate, dateFormatArray, true).isValid()) {
            $('.startDate').val("")
		   $('.endDate').val("");
        }
	}

	/**
	 * @Description: It displays dialogue popup
	 * @Param: NA
	 * @Return: NA
	 * @Date: 20/06/2016
	 **/
	function showPopup() {
		$("#dialog").dialog({
		modal: true,
		draggable: false,
		resizable: false,
		show: 'blind',
		hide: 'blind',
		width: 723,
		focus: function( event, ui ) {
			$('.ui-dialog-titlebar-close').removeClass('ui-state-focus');
			$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-icon-only.ui-dialog-titlebar-close.ui-state-focus').css('outline','-webkit-focus-ring-color auto 0px');
		}
		});
		$("body").css("overflow-y", "hidden");
		$('.ui-widget-overlay').css('background', '#101010');
		$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-icon-only.ui-dialog-titlebar-close.ui-state-focus').css('outline','-webkit-focus-ring-color auto 0px'); 
	}

	/**
	 * @Description: It disables the date fields 
	 * @Param: NA
	 * @Return: NA
	 * @Date: 25/06/2016
	 **/
	function disableDateFields(){
		if ($(".dateRange option:selected").val() && $(".dateRange option:selected").val() != 'Custom') {
				$('.startDate').attr('disabled', true);
				$('.endDate').attr('disabled', true);
			} 
			else {
				$('.startDate').attr('disabled', false);
				$('.endDate').attr('disabled', false);
			}
			if ($(".dateRange option:selected").val() && $(".dateRange option:selected").val() == 'Last N Days') {
				$(".NumberOfDay").show();
				if($(".TxtDays").val()==0){
					$(".TxtDays").val(30);
				}
			}
			else{
				$(".NumberOfDay").hide();
			}
	}
		

	/**
	 * @Description: It is used to hide the dialog panel
	 * @Param: NA
	 * @Return: NA
	 * @Date: 25/06/2016
	 **/    
	function hideAndShow(){
		$('.DialogPanelClass').hide();
	}
	   

	/**
	 * @Description: It replaces the Image tag to anchor
	 * @Param: str: String which has to be replaced to image tag
	 * @Return: NA
	 * @Date: 25/06/2016
	 **/   
	function replaceImageTagwithAnchor(str){
		if (str != null || str!=undefined ){                    
			var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/gi;
			var imgArr=str.match("<img[^>]+><\/img>");
				while(imgArr!=null && imgArr.length>0){
				var href=imgArr[0].match(urlPattern)[0];
				var selected=str.substr(str.indexOf(imgArr[0]),imgArr[0].length);
				str = str.replace(selected,"<br/><a href='#' class='ImageClass'>Image:</a><a href='"+href+"' target='_blank' class='anchorClass'>"+href+"</a>");
				imgArr=str.match("<img[^>]+><\/img>");
			}                        
		}
		return str;

	}
	   
	/**
	 * @Description: It prevents to close filter section if clicked inside filter section 
	 * @Param: isPropagate: Boolean to apply stop propagation when passed as true 
	 * @Return: NA
	 * @Date: 10/06/2016
	 **/   
	function preventPropagation(isPropagate) {
		if(isPropagate) {
			$('.dropdown-menu').on('click.stopPropagation',function(event){
				event.stopPropagation();
			});
			$('.dropdown-menu').on('dblclick.stopPropagation',function(event){
				event.stopPropagation();
			});
		}
	}
		
	/**
	 * @Description: It adds space in continuous words for word wrapping
	 * @Param: value: Value in a cell
	 * 		   threshold: Number of character size in a row of table cell in pdf
	 * @Return: NA
	 * @Date: 10/06/2016
	 **/
	function addSpacesContineousWord(value,threshold)  { 
		var strArray = [];
		if(value.length > threshold) {
		 var start=0;
		 var last=0;  
		 if(value == null || value == undefined || value == '') {
			return;
		 }
		 var splitArray = value.split(' ');
		 for(var index =0;index<splitArray.length;index++) {
			 if(splitArray[index].length>threshold) {
				 var start=0;
				 var last=0;    
				 while(start<splitArray[index].length) {
					 if((start+threshold)>splitArray[index].length)  {
						 last = splitArray[index].length;
					 } else {
						 last =start+threshold;
					 }  
					 strArray.push(splitArray[index].slice(start,last));
					 start+=threshold;  
				 }
			 }else{ 
				  strArray.push(splitArray[index]);
			 }
		 } 
		 value='';
		 for(index=0;index<strArray.length;index++){   
			 strSlice = strArray[index];
			 value =value+strSlice+' ';
		  }      
		}
		return value;
	}

	/** 
	  *Angular Js Code Starts
	 **/
	
	/**
	 * @Description: app variable defines the app for angular, controller method for the angular app
	 * @Param: String name for Controller, actual controller function
	 * @Return: NA
	 * @Date: 04/06/2016
	 **/
	var app = angular.module('myApp', [ "ngSanitize" ]);
	app
			.controller(
					'fetchDataController',
					function($scope, $timeout) {
						$scope.CurrentDate = new Date().toLocaleString()
								.split(',').join('');
						$scope.toUTCDate = toUTCDate;
						$scope.millisToUTCDate = millisToUTCDate;
						$scope.pageSize = pageSize;
						$scope.showLoader = true;
						$scope.loadMoreData = false;
						$scope.showMoreData = false;
						$scope.noSelectedObject = false;
						var i = 0;
						$scope.reverse = true;
						$scope.recordLimit;
						$scope.previousSortField = '';
						var attachmentCount = 0;
						var offSet = 0;
						$scope.noOfPages = 0;
						$scope.currentPage = 0;
						$scope.currentPagepdf = 0;
						$scope.pageSizePdf = 10;
						var baseUrl = salesforceBaseUrl;
						$scope.fetchedHistoryData = [];
						$scope.filteredHistoryData = [];
						$scope.isDisplayFilter = false;
						$scope.displayAppliedFilterIconRecordName = false;
						$scope.displayAppliedFilterIconUserName = false;
						$scope.displayAppliedFilterIconFieldName = false;
						setInputData();
						$scope.myFieldFilter = {
							selected : {}
						};
						$scope.myRecordFilter = {
							selected : {}
						};
						$scope.myUserFilter = {
							selected : {}
						};

						/**
						 * @Description: Escapes the quotea and converts them into html code
						 * @Param: String to be escaped
						 * @Return: NA
						 * @Date: 04/06/2016
						 **/
						$scope.getHtml = function(html) {
							if (html != null && html != undefined
									&& html != '' && html.indexOf("'") >= 0) {
								return html.split("'").join("&quot;");
							}
							return html;
						};

						/**
						 * @Description: Sets default values and invokes getNumberofAttachment
						 * @Param: NA
						 * @Return: NA
						 * @Date: 06/06/2016
						 **/
						$scope.getRecords = function() {
							offSet = 0;
							$scope.reverse = true;
							$scope.recordLimit = false;
							$scope.showMoreData = false;
							$scope.loadMoreData = false;
							$scope.noSelectedObject = false;
							$scope.fetchedHistoryData = [];
							$scope.filteredHistoryData = [];
							$scope.isDisplayFilter = false;
							$scope.displayAppliedFilterIconRecordName = false;
							$scope.displayAppliedFilterIconUserName = false;
							$scope.displayAppliedFilterIconFieldName = false;
							if (selectedObj.length == 1) {
								$scope.showLoader = true;
								$scope.noSelectedObject = true;
								$timeout(function(result) {
									$scope.showLoader = false;
								}, 100);
							} else {
								$scope.getNumberofAttachment();
							}
						};

						/**
						 * @Description: Function for generating and downloading pdf
						 * @Param: NA
						 * @Return: NA
						 * @Date: 06/06/2016
						 **/
						$scope.downloadPdf = function() {
							var contentArray = [];
							var displayHeader = [ {
								text : LabelVD_RecordName,
								style : 'header'
							}, {
								text : LabelVD_Modified_on,
								style : 'header'
							}, {
								text : LabelVD_Modified_By,
								style : 'header'
							}, {
								text : LabelVD_Modified_Field,
								style : 'header'
							}, {
								text : LabelVD_Old_Value,
								style : 'header'
							}, {
								text : LabelVD_New_Value,
								style : 'header'
							} ]
							var headerArray = [	LabelVD_JsonRecordName,
												LabelVD_JsonModifiedDisplayTime,
												LabelVD_JsonModifiedByName,
												LabelVD_JsonfieldLabel,
												LabelVD_JsonoldValue,
												LabelVD_JsonnewValue ];
							angular
									.forEach(
											$scope.filteredHistoryData,
											function(obj) {
												var currentPage = 0;
												var threshold = 11;
												var rowArray = [];
												for (var index = 0; index < headerArray.length; index++) {
													var value = angular
															.equals(
																	obj[headerArray[index]],
																	null) ? ''
															: obj[headerArray[index]];
													if (value.length > threshold) {
														value = addSpacesContineousWord(
																value,
																threshold);
													}
													rowArray.push(value);
												}
												contentArray.push(rowArray);
											});
							contentArray.unshift(displayHeader);
							var resultpdf = selectedObjLabel.substring(0,
									selectedObjLabel.indexOf('('));
							var docDefinition = {
								footer : function(currentPagepdf,
										pageSizePdf) {
									return {
										columns : [
												{
													text : LabelExported_by_Label+':'
															+ ' '+UserName
															+ ' '+LabelVD_on+' '
															+ $scope.CurrentDate
															+ ', '+LabelVD_powered_by+':',
													fontSize : 9,
													width : 'auto',
													margin : [ 40, 0, 2, 0 ]
												},
												{
													image : imageDisplay(),
													width : 20,
													height : 9,
													margin : [ 0, 0, 0, 0 ]
												},
												{
													text : LabelVD_company_name,
													fontSize : 9,
													width : 'auto',
													margin : [ -7, 0, 0, 0 ]
												},
												{
													text : LabelVD_page
															+ ' '
															+ currentPagepdf
																	.toString()
															+ ' '+LabelVD_Of+' '
															+ pageSizePdf,
													width : 'auto',
													margin : [ PDFLeftMargin, 0, 0, 0 ],
													fontSize : 9
												} ]
									}
								},
								content : [
										{
											text : '' + resultpdf
													+ LabelVD_Title,
											alignment : 'center',
											fontSize : 16,
											margin : [ 0, 0, 0, 10 ]
										},
										{
											table : {
												headerRows : 1,
												widths : [ '16.5%',
														'16.5%', '16.5%',
														'16.5%', '16.5%',
														'16.5%' ],
												body : contentArray
											}
										} ],
								styles : {
									header : {
										color : 'black',
										fillColor : '#a9a9a9',
										fontSize : 11,
										bold : true
									}
								}
							};
							pdfMake
									.createPdf(docDefinition)
									.download(
											''
													+ resultpdf
													+ ' Historical Data.pdf');
						};

						function imageDisplay() {
							var c = document
									.getElementById("myCanvas");
							var ctx = c.getContext("2d");
							var img = document.getElementById("preview");
							ctx.drawImage(img, 30, 30);
							return c.toDataURL();
						}

						/**
						 * @Description: Function to generate and export the csv file
						 * @Param: NA
						 * @Return: NA
						 * @Date: 06/06/2016
						 **/
						$scope.exportData = function() {
							var tempList = $scope.filteredHistoryData;
							var displayFooter = {
								recordName : LabelExported_by_Label+':'
										+ ' '+UserFirstName+' '+UserLastName
										+ ' '+LabelVD_on+' '
										+ $scope.CurrentDate
										+ ', \n'+LabelVD_powered_by+':'
										+ ' '+ LabelVD_company_name,
								modifiedDisplayTime : '',
								fieldLabel : '',
								modifiedByName : '',
								oldValue : '',
								newValue : ''
							};
							var insertBlank = {
								recordName : '',
								modifiedDisplayTime : '',
								fieldLabel : '',
								modifiedByName : '',
								oldValue : '',
								newValue : ''
							};
							var insertBlankData = {
								recordName : '',
								modifiedDisplayTime : '',
								fieldLabel : '',
								modifiedByName : '',
								oldValue : '',
								newValue : ''
							};
							tempList.push(insertBlank);
							tempList.push(insertBlankData);
							tempList.push(displayFooter);
							var result = selectedObjLabel.substring(0,
									selectedObjLabel.indexOf('('));
							alasql(
									'SELECT recordName AS Name ,modifiedDisplayTime AS ModifiedTime , '
											+ 'fieldLabel AS ModifiedField, modifiedByName AS ModifiedBy , oldValue AS OldValue , '
											+ 'newValue AS NewValue INTO CSV("'
											+ result
											+ ' Historical Data.csv",{headers:true}) FROM ?',
									[ tempList ]);
							tempList.pop(displayFooter);
							tempList.pop(insertBlankData);
							tempList.pop(insertBlank);
						};

						var toUTCDate = function(date) {
							var _utc = new Date(date.getUTCFullYear(), date
									.getUTCMonth(), date.getUTCDate(), date
									.getUTCHours(), date.getUTCMinutes(),
									date.getUTCSeconds());

							return _utc;
						};
						var millisToUTCDate = function(millis) {
							return toUTCDate(new Date(millis));
						};

						/**
						 * @Description: Gets the total page count based on total data/by page size
						 * @Param: NA
						 * @Return: NA
						 * @Date: 06/06/2016
						 **/
						$scope.numberOfPages = function() {
							return Math
									.ceil($scope.fetchedHistoryData.length
											/ $scope.pageSize);
						}

						/**
						 * @Description: Returns the upper limit of records shown on the page
						 * @Param: NA
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.totalNumberOfRecordInPage = function() {
							return ($scope.currentPage * $scope.pageSize) > ($scope.fetchedHistoryData.length) ? ($scope.fetchedHistoryData.length)
									: ($scope.currentPage * $scope.pageSize);
						}

						/**
						 * @Description: Sorts the data in the table
						 * @Param: Name of the column according to which data needs to be sorted
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.sort = function(keyname) {
							$scope.showLoader = true;
							var isAllColumnValueSame = true;
							for (var index = 1; index < $scope.filteredHistoryData.length; index++) {

								if ($scope.filteredHistoryData[index - 1][keyname] != $scope.filteredHistoryData[index][keyname]) {
									isAllColumnValueSame = false;
									break;
								}
							}
							if (isAllColumnValueSame === true) {
								$timeout(function() {
									$scope.showLoader = false;

									$scope.$apply();
								}, 100);
								return;
							}
							$scope.sortKey = keyname; //set the sortKey to the param passed
							if (angular.equals($scope.previousSortField,
									keyname)) {
								$scope.reverse = !$scope.reverse;
							} else {
								$scope.reverse = false;
							}
							$scope.previousSortField = keyname;
							$timeout(function() {
								$scope.showLoader = false;
								$scope.$apply();
							}, 100);
						}

						/**
						 * @Description: PreApplyFilter Function sets variables on each filter as true
						 * @Param: Coulumn Name
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.preApplyFilter = function(columnName) {

							if( columnName == LabelVD_RecordName ) {

								$scope.displayAppliedFilterIconRecordName = true;

							}
							if(columnName == LabelVD_Modified_By ) {

								$scope.displayAppliedFilterIconUserName = true;

							}
							if(columnName == LabelVD_Modified_Field ) {

								$scope.displayAppliedFilterIconFieldName = true;

							}
						};

						/**
						 * @Description: Filters the records according to the selection
						 * @Param: Coulumn Name
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.applyFilters = function() {
							$scope.showLoader = true;
							$scope.isDisplayFilter = true;
							$scope.loseFocus();
							$timeout(
									function(result) {
										$scope.filteredHistoryData = [];
										var fieldArray = [];
										var recordArray = [];
										var userArray = [];
										var isPushedAlready;
										for (var index = 0; index < $scope.fetchedHistoryData.length; index++) {
											var recordCount = 0;
											isPushedAlready = false;

											for ( var property in $scope.myFieldFilter.selected) {
												if ($scope.myFieldFilter.selected[property]
														&& $scope.myFieldFilter.selected[property] === $scope
																.getHtml($scope.fetchedHistoryData[index].fieldName)
														&& $scope.displayAppliedFilterIconFieldName) {

													fieldArray.push(index);
												} else if (!$scope.myFieldFilter.selected[property]) {
													delete $scope.myFieldFilter.selected[property];
												}
											}
											for ( var property in $scope.myRecordFilter.selected) {
												if ($scope.myRecordFilter.selected[property]
														&& $scope.myRecordFilter.selected[property] === $scope
																.getHtml($scope.fetchedHistoryData[index].recordName)
														&& $scope.displayAppliedFilterIconRecordName) {
													recordArray.push(index);

												} else if (!$scope.myRecordFilter.selected[property]) {
													delete $scope.myRecordFilter.selected[property];
												}
											}
											for ( var property in $scope.myUserFilter.selected) {
												if ($scope.myUserFilter.selected[property]
														&& $scope.myUserFilter.selected[property] === $scope
																.getHtml($scope.fetchedHistoryData[index].modifiedByName)
														&& $scope.displayAppliedFilterIconUserName) {
													userArray.push(index);

												} else if (!$scope.myUserFilter.selected[property]) {
													delete $scope.myUserFilter.selected[property];
												}
											}
										}
										for (var index = 0; index < $scope.fetchedHistoryData.length; index++) {
											if (((fieldArray.indexOf(index) >= 0) || (fieldArray.length === 0))
													&& ((recordArray
															.indexOf(index) >= 0) || (recordArray.length === 0))
													&& ((userArray
															.indexOf(index) >= 0) || (userArray.length === 0))) {
												$scope.filteredHistoryData
														.push($scope.fetchedHistoryData[index]);
											}
										}
										if (fieldArray.length === 0) {
											$scope.displayAppliedFilterIconFieldName = false;
										}
										if (recordArray.length === 0) {
											$scope.displayAppliedFilterIconRecordName = false;
										}
										if (userArray.length === 0) {
											$scope.displayAppliedFilterIconUserName = false;
										}
										$scope.currentPage = 0;
										$scope
												.numberOfPages($scope.filteredHistoryData.length);
										$scope.showLoader = false;
									}, 100);
						}

						/**
						 * @Description: Returns the number of pages
						 * @Param: Total count
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.numberOfPages = function(totalItemCount) {

							$scope.noOfPages = Math.ceil(totalItemCount
									/ $scope.pageSize);
							if ($scope.noOfPages <= $scope.currentPage) {
								$scope.currentPage = $scope.noOfPages - 1;
							}
							if ($scope.noOfPages === 0) {
								$scope.currentPage = 0;
							}
						}

						/**
						 * @Description: Removes the filter applied and displays all records
						 * @Param: Name of the Field to clear the filter on
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.clearFilter = function(filterName) {
							$scope.showLoader = true;
							$scope.loseFocus();
							$timeout(
									function(result) {
										if (angular.equals(filterName,
												'recordName')) {
											$scope.myRecordFilter.selected = {};
											$scope.displayAppliedFilterIconRecordName = false;
											$scope.applyFilters();

										} else if (angular.equals(
												filterName, 'userName')) {
											$scope.myUserFilter.selected = {};
											$scope.displayAppliedFilterIconUserName = false;
											$scope.applyFilters();


										} else if (angular.equals(
												filterName, 'fieldName')) {
											$scope.myFieldFilter.selected = {};
											$scope.displayAppliedFilterIconFieldName = false;
											$scope.applyFilters();

										} else if (angular.equals(
												filterName,
												'clearAllFilter')) {
											$scope.myRecordFilter.selected = {};
											$scope.myUserFilter.selected = {};
											$scope.myFieldFilter.selected = {};
											$scope.applyFilters();
											$scope
													.numberOfPages($scope.filteredHistoryData.length);
										}
										if (angular
												.equals(
														$scope.myFieldFilter.selected,
														{})
												&& angular
														.equals(
																$scope.myRecordFilter.selected,
																{})
												&& angular
														.equals(
																$scope.myUserFilter.selected,
																{})) {
											$scope.isDisplayFilter = false;
											$scope.displayAppliedFilterIconRecordName = false;
											$scope.displayAppliedFilterIconUserName = false;
											$scope.displayAppliedFilterIconFieldName = false;
										}
									}, 100);
							$scope.showLoader = false;
						};

						/**
						 * @Description: Checks if any filter is applied on the page
						 * @Param: NA
						 * @Return: true/false
						 * @Date: 08/06/2016
						 **/
						$scope.checkIfFiltersAppliedOrNot = function() {
							if (angular.equals(
									$scope.myFieldFilter.selected, {})
									&& angular.equals(
											$scope.myRecordFilter.selected,
											{})
									&& angular.equals(
											$scope.myUserFilter.selected,
											{})) {
								$scope.isDisplayFilter = false;
							}
							if (angular.equals($scope.isDisplayFilter,
									false)) {
								return false;
							}
							return true;
						};

						/**
						 * @Description: Use to hide the filtered pop-up
						 * @Param: NA
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.loseFocus = function() {
							angular.element(document).find('body')
									.triggerHandler('click');
							$('.dropdown-menu')
									.off('click.stopPropagation');
							$('.dropdown-menu open').hide();
						};

						/**
						 * @Description: Gets the total number of attachment for the selected range of date
						 * @Param: NA
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.getNumberofAttachment = function() {
							$timeout(function(result) {
								$scope.showLoader = true;
							}, 100);
							Visualforce.remoting.Manager
									.invokeAction(
											remoteActionGetAttachmentCount,
											selectedObj,
											startDate,
											endDate,
											function(result, event) {
												if (event.status) {
													attachmentCount = result;
													$scope.callLoadData();
												} else {
													$scope.showLoader = false;
													$scope.$apply();
												}
											}, {
												buffer : false,
												escape : false,
												timeout : 30000
											});
						}

						/**
						 * @Description: Returns if there are more than 200 records
						 * @Param: NA
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.getShowMoreData = function() {
							return ($scope.showMoreData);
						}

						/**
						 * @Description: Invokes loadData method for each attchment
						 * @Param: NA
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.callLoadData = function() {
							$scope.fetchedHistoryData = [];
							$scope.filteredHistoryData = [];
							$scope.myRecordFilter.selected = {};
							$scope.myUserFilter.selected = {};
							$scope.myFieldFilter.selected = {};
							$scope.isDisplayFilter = false;
							$scope.displayAppliedFilterIconRecordName = false;
							$scope.displayAppliedFilterIconUserName = false;
							$scope.displayAppliedFilterIconFieldName = false;
							offSet = 0;
							if (attachmentCount > 0) {
								for (i = 0; i < attachmentCount; i++) {
									if (!$scope.showMoreData) {
										$scope.loadData(i);
									} else if ($scope.loadMoreData
											&& $scope.showMoreData) {
										if (!$scope.recordLimit) {
											$scope.loadData(i);
										}
									}
								}
							} else {
								$scope.showLoader = false;
								$scope.$apply();
							}
						}

						/**
						 * @Description: Fetches all the records for the current date range
						 * @Param: NA
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.loadMoreDataForAnObject = function() {
							$scope.loadMoreData = true;
							$scope.callLoadData();
						}

						/**
						 * @Description: Invokes the method to get the data from the attachment
						 * @Param: Sequence number of attachment to be fetched
						 * @Return: NA
						 * @Date: 08/06/2016
						 **/
						$scope.loadData = function(offSet1) {
							$scope.showLoader = true;
							Visualforce.remoting.Manager
									.invokeAction(
											remoteActionfetchAttachments,
											selectedObj,
											startDate,
											endDate,
											isAllDataAccessible,
											offSet1,
											function(result, event) {
												if (event.status) {
													if (result) {
														angular
																.forEach(
																		JSON
																				.parse(result),
																		function(
																				item) {
																			if (!$scope.showMoreData) {
																				if ($scope.fetchedHistoryData.length < 200) {
																					item.newValue = replaceImageTagwithAnchor(item.newValue);
																					item.oldValue = replaceImageTagwithAnchor(item.oldValue);
																					$scope.fetchedHistoryData
																							.push(item);
																				} else {
																					$scope.showMoreData = true;
																				}
																			} else if ($scope.showMoreData
																					&& $scope.loadMoreData) {

																				if ($scope.fetchedHistoryData.length < 50000) {
																					item.newValue = replaceImageTagwithAnchor(item.newValue);
																					item.oldValue = replaceImageTagwithAnchor(item.oldValue);
																					$scope.fetchedHistoryData
																							.push(item);
																				} else {
																					$scope.recordLimit = true;
																				}
																			}
																		});
														$scope.filteredHistoryData = $scope.fetchedHistoryData;
														$scope
																.numberOfPages($scope.filteredHistoryData.length);
													}
													if (offSet == attachmentCount - 1) {
														if ($scope.showMoreData
																&& $scope.loadMoreData) {
															$scope.showMoreData = false;
														}
														$scope.showLoader = false;
														$scope.$apply();
													}
													++offSet;
												} else {
													$scope.showLoader = false;
													$scope.$apply();
												}
											}, {
												buffer : false,
												escape : false,
												timeout : 30000
											});
						}

						/**
						 * @Description: For next previous pagination button sets the page and
						 *               shows the loading symbole
						 * @Param: Current page value
						 * @Return: NA
						 * @Date: 30/06/2016
						 **/
						$scope.paginationForAllButton = function(
								currentPageValue) {
							$scope.showLoader = true;
							$timeout(function(result) {
								$scope.currentPage = currentPageValue;
								$scope.showLoader = false;
							}, 2000);

						}

						$scope.getRecords();
					});
	/**
	 * @Description: Set the focus back on input field when we enter number of days in N days date range
	 * @Param: NA
	 * @Return: NA
	 * @Date: 8/12/2016
	 **/				
	angular.module('myApp').directive('showFocus', function($timeout) {
		  return function(scope, element, attrs) {
			scope.$watch(attrs.showFocus, 
			  function (newValue) { 
			
				$timeout(function() {
					$(".TxtDays").focus();
				});
			  },true);
		  };    
	});
  
  
	/**
	 * @Description: Angular filter for the first page
	 * @Param: NA
	 * @Return: NA
	 * @Date: 30/06/2016
	 **/
	app.filter('firstPage', function() {
		return function(input, start) {
			start = +start;
			return input.slice(start);
		}
	});

	/**
	 * @Description: Create the unique filter select options dynamically
	 *               based on the column values
	 * @Param: NA
	 * @Return: NA
	 * @Date: 30/06/2016
	 **/
	app.filter('unique', function() {
		return function(items, filterOn) {
			if (filterOn === false) {
				return items;
			}
			if ((filterOn || angular.isUndefined(filterOn))
					&& angular.isArray(items)) {
				var hashCheck = {}, newItems = [];
				var extractValueToCompare = function(item) {
					if (angular.isObject(item)
							&& angular.isString(filterOn)) {
						return item[filterOn];
					} else {
						return item;
					}
				};
				angular.forEach(items, function(item) {
					var valueToCheck, isDuplicate = false;
					for (var i = 0; i < newItems.length; i++) {
						if (angular.equals(
								extractValueToCompare(newItems[i]),
								extractValueToCompare(item))) {
							isDuplicate = true;
							break;
						}
					}
					if (!isDuplicate) {
						newItems.push(item);
					}
				});
				items = newItems;
			}
			return items;
		};
	});